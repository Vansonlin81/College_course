{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1MsVA6zvKZEnGb7yNWjOvhlkHQe7U9S9t","timestamp":1683524862799}],"private_outputs":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard"},"cells":[{"cell_type":"markdown","source":["\n","# **語言模型：基於機率模型**\n","\n","\n","## Hidden Markov Model\n","\n","目標：\n","\n","\n","*   根據任務內容，準備訓練資料集\n","*   使用 hmmlearn 套件\n","*   應用在想定的任務上\n","\n","\n","---\n","**今日任務：訓練中文斷詞**"],"metadata":{"id":"rkD_3y9jdz00"}},{"cell_type":"markdown","source":["使用 MultinomialHMM 類別\n","\n","參數：\n","\n","```\n","n_components : 共有幾個觀測狀態\n","\n","```\n","\n","成員資料／函式：\n","\n","\n","```\n","model.startprob_ : 起始機率\n","model.transmat_ : 轉換機率\n","model.emissionprob_ : 觀測機率\n","```\n","\n","\n","\n"],"metadata":{"id":"7GvR_NGBAJUY"}},{"cell_type":"code","source":["# 安裝必要套件\n","!pip install hmmlearn==0.2.6\n","# 0.2.1 is OK."],"metadata":{"id":"vE99vQNmZPYe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"UO0CxvQmHL7k"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 請同學先把 as_data.zip 上傳到你的 google 雲端硬碟，再執行以下\n","\n","# (1) 掛載 google drive，並找到你上傳的路徑\n","# (2) 複製 as_data.zip 到這個 VM 下\n","# (3) 解開 zip 檔\n","# (4) 移動所有的 .utf8 到 data 目錄\n","!cp /content/drive/MyDrive/Colab Notebooks/人工智慧技術與網路意向分析/Week 13/as_data.zip .\n","\n","!unzip as_data.zip\n","\n","!mkdir data\n","\n","!mv *.utf8 data\n"],"metadata":{"id":"6c6-Ay7Ez0b_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title\n","# del config_instance\n","# del __corpus\n","# del __model"],"metadata":{"id":"yics068Q4e9M"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 匯入必要套件\n","import logging\n","\n","logger = logging.getLogger('maty_logger')\n","# 取代 print\n","logger.setLevel(logging.INFO)"],"metadata":{"id":"y-kBVUfobtUg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 設定檔\n","\n","config_instance = None\n","\n","class Config:\n","\n","    def __init__(self):\n","        self.config_dict = {\n","            'segment': {\n","                'train_corpus_path': 'data/as_training.utf8',\n","                'test_corpus_path': 'data/as_test.utf8',\n","                'test_corpus_gold_path': 'data/as_testing_gold.utf8',\n","\n","                'init_state_path': 'data/init_state.pkl',\n","                'trans_state_path': 'data/trans_state.pkl',\n","                'emit_state_path': 'data/emit_state.pkl',\n","            },\n","        }\n","\n","    def get(self, section_name, arg_name):\n","        return self.config_dict[section_name][arg_name]\n","\n","\n","def get_config():\n","    global config_instance\n","    if not config_instance:\n","        config_instance = Config()\n","    return config_instance"],"metadata":{"id":"1rq_8KNm1dZf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pickle\n","from collections import Counter\n","\n","\n","__corpus = None\n","\n","\n","# 'S' : 單字詞語\n","# 'B' : 複數字詞語 - 開始字\n","# 'M' : 複數字詞語 - 中間字\n","# 'E' : 複數字詞語 - 結束字\n","\n","class TaskHandler:\n","    # trans_mat：狀態轉移矩陣，trans_mat[state1][state2] 表示 train data 由 state1 轉移到 state2 的次數。\n","    # emit_mat：觀測矩陣，emit_mat[state][char] 表示 training set 中 某字 標註為 state 的次數。\n","    # init_vec：初始向量，init_vec[state] 表示狀態 state 在 training set 中出現的次數。\n","    # state_count：狀態統計，state_count[state] 表示狀態 state 出現的次數。\n","    # word ：字詞集合。\n","    _words = []\n","    # 觀測狀態\n","    _states = []\n","    # 字典\n","    _vocab = set([])\n","    # 標點符號\n","    _puns = set(u\"？?!！·【】、；，。、\\s+\\t+~@#$%^&*()_+{}|:\\\"<\"\n","                u\"~@#￥%……&*（）——+{}|：“”‘’《》>`\\-=\\[\\]\\\\\\\\;',\\./■\")\n","    @classmethod\n","    def initialize(cls):\n","        \"\"\"\n","        初始化\n","        \"\"\"\n","        config = get_config()\n","        train_corpus_path = config.get('segment', 'train_corpus_path')\n","        cls.read_corpus_from_file(train_corpus_path)\n","        cls.gen_vocabs()\n","\n","    @classmethod\n","    def is_puns(cls, c):\n","        \"\"\"\n","        是否為標點符號\n","        \"\"\"\n","        return c in cls._puns\n","\n","    @classmethod\n","    def gen_vocabs(cls):\n","        \"\"\"\n","        產生字典\n","        \"\"\"\n","        cls._vocab = list(set(cls._words))+[u'<UNK>']\n","        logger.info('字典內容：{}'.format(cls._vocab))\n","\n","    @classmethod\n","    def read_corpus_from_file(cls, file_path):\n","        \"\"\"\n","        從檔案讀入語料\n","        \"\"\"\n","        f = open(file_path, 'r', encoding = \"UTF-8-sig\")\n","        lines = f.readlines()\n","        for line in lines:\n","            #cls._words.extend([word for word in line.decode('gbk').strip().split(' ') if word and not cls.is_puns(word)])\n","            cls._words.extend([word for word in line.strip().split('\\u3000') if word and not cls.is_puns(word)])\n","        f.close()\n","        logger.info('語料內容：{}'.format(cls._words))\n","\n","    @classmethod\n","    def word_to_states(cls, word):\n","        \"\"\"\n","        標記對應觀測狀態\n","        'S' : 單字詞語\n","        'B' : 複數字詞語 - 開始字\n","        'M' : 複數字詞語 - 中間字\n","        'E' : 複數字詞語 - 結束字\n","        \"\"\"\n","        word_len = len(word)\n","        if word_len == 1:\n","            cls._states.append('S')\n","        else:\n","            state = ['M'] * word_len\n","            state[0] = 'B'\n","            state[-1] = 'E'\n","            cls._states.append(''.join(state))\n","\n","    @classmethod\n","    def get_train_data(cls):\n","        \"\"\"\n","        取得訓練資料\n","        \"\"\"\n","        return cls._words\n","    @classmethod\n","    def get_vocabs(cls):\n","        \"\"\"\n","        取得字典\n","        \"\"\"\n","        return cls._vocab\n","    @classmethod\n","    def cal_init_state(cls):\n","        \"\"\"\n","        設定起始機率\n","        \"\"\"\n","        init_counts = {'S': 0.0, 'B': 0.0, 'M': 0.0, 'E': 0.0}\n","        for state in cls._states:\n","            init_counts[state[0]] += 1.0\n","        words_count = len(cls._words)\n","        # init_state = {k: log((v+1)/words_count) for k, v in init_counts.items()}\n","        init_state = {k: (v+1)/words_count for k, v in init_counts.items()}\n","\n","        msg = f'[cal_init_state] words_count = {words_count} ; init_state = {init_state}'\n","        logger.info( msg )\n","        return init_state\n","\n","    @classmethod\n","    def cal_trans_state(cls):\n","        \"\"\"\n","        計算狀態轉移機率\n","        \"\"\"\n","        trans_counts = {'S': {'S': 0.0, 'B': 0.0, 'M': 0.0, 'E': 0.0},\n","                        'B': {'S': 0.0, 'B': 0.0, 'M': 0.0, 'E': 0.0},\n","                        'M': {'S': 0.0, 'B': 0.0, 'M': 0.0, 'E': 0.0},\n","                        'E': {'S': 0.0, 'B': 0.0, 'M': 0.0, 'E': 0.0}}\n","        states = ''.join(cls._states)\n","        counter = Counter(states)\n","        for index in range(len(states)):\n","            if index+1 == len(states): continue\n","            trans_counts[states[index]][states[index+1]] += 1.0\n","        # trans_state = {k: {kk: log((vv+1)/counter[k]) for kk, vv in v.items()} for k, v in trans_counts.items()}\n","        trans_state = {k: {kk: (vv+1)/counter[k] for kk, vv in v.items()} for k, v in trans_counts.items()}\n","        msg = f'[cal_trans_state] trans_state = {trans_state} '\n","        logger.info( msg )\n","        return trans_state\n","\n","    @classmethod\n","    def cal_emit_state(cls):\n","        \"\"\"\n","        計算觀測機率\n","        \"\"\"\n","        word_dict = {word: 0.0 for word in ''.join(cls._vocab)}\n","        emit_counts = {'S': dict(word_dict), 'B': dict(word_dict), 'M': dict(word_dict), 'E': dict(word_dict)}\n","        states = ''.join(cls._states)\n","        counter = Counter(states)\n","        for index in range(len(cls._states)):\n","            for i in range(len(cls._states[index])):\n","                emit_counts[cls._states[index][i]][cls._words[index][i]] += 1\n","        # emit_state = {k: {kk: log((vv+1)/counter[k]) for kk, vv in v.items()} for k, v in emit_counts.items()}\n","        emit_state = {k: {kk: (vv+1)/counter[k] for kk, vv in v.items()} for k, v in emit_counts.items()}\n","        msg = f'[cal_emit_state] emit_counts = {emit_counts} ;\\n emit_state = {emit_state}'\n","        logger.info( msg )\n","        return emit_state\n","\n","    @classmethod\n","    def cal_state(cls):\n","        \"\"\"\n","        計算三種機率，完成後儲存結果\n","        \"\"\"\n","        for word in cls._words:\n","            cls.word_to_states(word)\n","        init_state = cls.cal_init_state()\n","        trans_state = cls.cal_trans_state()\n","        emit_state = cls.cal_emit_state()\n","        cls.save_state(init_state, trans_state, emit_state)\n","\n","    @classmethod\n","    def save_state_to_file(cls, content, path):\n","        \"\"\"\n","        存檔\n","        \"\"\"\n","        f = open(path, 'wb')\n","        pickle.dump(content, f)\n","        f.close()\n","\n","    @classmethod\n","    def read_state_from_file(cls, state_path):\n","        \"\"\"\n","        讀檔\n","        \"\"\"\n","        #f = open(state_path, 'rb')\n","        #content = pickle.load(f)\n","        #f.close()\n","        content = ''\n","        with open(state_path, 'rb') as f:\n","            content = pickle.loads(f.read())\n","        return content\n","\n","    @classmethod\n","    def save_state(cls, init_state, trans_state, emit_state):\n","        \"\"\"\n","        儲存(三種機率)\n","        \"\"\"\n","        config = get_config()\n","        init_state_path = config.get('segment', 'init_state_path')\n","        trans_state_path = config.get('segment', 'trans_state_path')\n","        emit_state_path = config.get('segment', 'emit_state_path')\n","        cls.save_state_to_file(init_state, init_state_path)\n","        cls.save_state_to_file(trans_state, trans_state_path)\n","        cls.save_state_to_file(emit_state, emit_state_path)\n","\n","    @classmethod\n","    def get_state(cls, name):\n","        \"\"\"\n","        讀取(三種機率)\n","        \"\"\"\n","        config = get_config()\n","        if name == 'init':\n","            state_path = config.get('segment', 'init_state_path')\n","        elif name == 'trans':\n","            state_path = config.get('segment', 'trans_state_path')\n","        elif name == 'emit':\n","            state_path = config.get('segment', 'emit_state_path')\n","        else:\n","            raise ValueError('state name must in [\"init\", \"trans\", \"emit\"].')\n","        state = cls.read_state_from_file(state_path)\n","        return state\n","\n","    @classmethod\n","    def process_content(cls, lines):\n","        return [''.join([word for word in line.strip() if not cls.is_puns(word)]) for line in lines]\n","        #return [''.join([word for word in line.decode('gbk').strip() if not cls.is_puns(word)]) for line in lines]\n","\n","    @classmethod\n","    def get_test_corpus(cls, name):\n","        \"\"\"\n","        讀取測試集、及 ground truth\n","        \"\"\"\n","        config = get_config()\n","        if name == 'test':\n","            path = config.get('segment', 'test_corpus_path')\n","        elif name == 'test_gold':\n","            path = config.get('segment', 'test_corpus_gold_path')\n","        else:\n","            raise ValueError('test or test_gold')\n","        f = open(path, 'r', encoding='UTF-8-sig')\n","        lines = f.readlines()\n","        corpus = cls.process_content(lines)\n","        f.close()\n","        return corpus\n","\n","    def __init__(self):\n","        raise Exception(\"This class have not element method.\")\n","\n","\n","def get_task():\n","    \"\"\"\n","    專門處理資料及統計相關事項\n","    \"\"\"\n","    global __corpus\n","    if not __corpus:\n","        __corpus = TaskHandler\n","    return __corpus"],"metadata":{"id":"cOrhEE2y1ebS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","import numpy as np\n","from hmmlearn.hmm import MultinomialHMM #, CategoricalHMM\n","\n","__model = None\n","\n","class HMMHandler:\n","\n","    def __init__(self):\n","        self.corpus = get_task()\n","        self.states, self.init_p = self.get_init_state()\n","        self.trans_p = self.get_trans_state()\n","        self.vocabs, self.emit_p = self.get_emit_state()\n","        self.model = self.get_model()\n","\n","    def get_init_state(self):\n","        \"\"\"\n","        取得起始機率，轉為numpy形式\n","        \"\"\"\n","        states = ['S', 'B', 'M', 'E']\n","        init_state = self.corpus.get_state('init')\n","        init_p = np.array([init_state[s] for s in states])\n","        return states, init_p\n","\n","    def get_trans_state(self):\n","        \"\"\"\n","        取得轉移機率，轉為numpy形式\n","        \"\"\"\n","        trans_state = self.corpus.get_state('trans')\n","        #print('trans_state :', trans_state)\n","        trans_p = np.array([[trans_state[s][ss] for ss in self.states] for s in self.states])\n","        #trans_p = np.array([[round(trans_state[s][ss], 2) for ss in self.states] for s in self.states])\n","        # normalize the matrix\n","        #trans_p = np.zeros( (len(self.states), len(self.states)) )\n","        #for i, s in enumerate(self.states):\n","        #    print(trans_state[s])\n","        #    sum_row = sum(trans_state[s].values())\n","        #    for j, ss in enumerate(self.states):\n","        #        print(trans_state[s][ss])\n","        #        trans_p[i][j] = trans_state[s][ss]/ sum_row\n","\n","        return trans_p\n","\n","    def get_emit_state(self):\n","        \"\"\"\n","        取得觀測機率，轉為numpy形式\n","        \"\"\"\n","        emit_state = self.corpus.get_state('emit')\n","        vocabs = []\n","        for s in self.states:\n","            vocabs.extend([k for k, v in emit_state[s].items()])\n","        vocabs = list(set(vocabs))\n","        emit_p = np.array([[emit_state[s][w] for w in vocabs] for s in self.states])\n","        return vocabs, emit_p\n","\n","    def get_model(self):\n","        \"\"\"\n","        初始化hmm模型\n","        \"\"\"\n","        model = MultinomialHMM(n_components=len(self.states),  verbose=True)\n","        #model = CategoricalHMM(n_components=len(self.states), verbose=True)\n","        model.startprob_ = self.init_p\n","        model.transmat_ = self.trans_p\n","        model.emissionprob_ = self.emit_p\n","        model.n_features = len(self.vocabs)\n","        return model\n","\n","    def pre_process(self, word):\n","        \"\"\"\n","        如果有字詞沒有在字典裡，設定為 <UNK>\n","        \"\"\"\n","        if word in self.vocabs:\n","            return self.vocabs.index(word)\n","        else:\n","            return len(self.vocabs)-1\n","\n","    def cut(self, sentence):\n","        \"\"\"\n","        執行斷詞\n","        \"\"\"\n","        seen_n = np.array([[self.pre_process(w) for w in sentence]]).T\n","        msg = f'[cut] Before model.decode = {seen_n} ; '\n","        logger.info( msg )\n","        log_p, b = self.model.decode(seen_n, algorithm='viterbi')\n","        #states = self.model.predict_proba(seen_n)\n","        #msg = f'[cut] predict states = {states} ;\\n '\n","        msg = f'[cut] log_p : {log_p}, b = {[ self.states[s] for s in b ]}'\n","        logger.info( msg )\n","\n","        states = list(map(lambda x: self.states[x], b))\n","        cut_sentence = ''\n","        for index in range(len(states)):\n","            if states[index] in ('S', 'E'):\n","                cut_sentence += sentence[index]+' '\n","            else:\n","                cut_sentence += sentence[index]\n","        return cut_sentence\n","\n","    @staticmethod\n","    def stats(cut_corpus, gold_corpus):\n","        \"\"\"\n","        測試集與 ground truth 比對；計算 accuracy, recall, and F1 score\n","        \"\"\"\n","        success_count = 0\n","        cut_count = 0\n","        gold_count = 0\n","        for index in range(len(cut_corpus)):\n","            cut_sentence = cut_corpus[index].split('\\u3000')\n","            gold_sentence = gold_corpus[index].split('\\u3000')\n","            cut_count += len(cut_sentence)\n","            gold_count += len(gold_sentence)\n","            for word in cut_sentence:\n","                if word in gold_sentence:\n","                    success_count += 1\n","        recall = float(success_count)/float(gold_count)\n","        precision = float(success_count)/float(cut_count)\n","        f1 = (2*recall*precision)/(recall+precision)\n","        return [precision, recall, f1]\n","\n","    def sentence2index(self, sentence, length):\n","        ans = np.zeros(length)\n","        #for word, idx in self.vocabs:\n","        for word in sentence:\n","            idx_in_vocabs = self.vocabs.index(word)\n","            #ans.append(idx_in_vocabs)\n","            ans[idx_in_vocabs] = 1\n","        print(ans.shape)\n","        return ans\n","\n","    def test(self):\n","        \"\"\"\n","        執行測試集驗證\n","        \"\"\"\n","        test_corpus = self.corpus.get_test_corpus('test')\n","        msg = f'[test] test_corpus = {test_corpus} ;'\n","        logger.info( msg )\n","\n","        gold_corpus = [sentence.replace('  ', ' ').strip() for sentence in self.corpus.get_test_corpus('test_gold') if sentence]\n","        cut_corpus = [self.cut(sentence).strip() for sentence in test_corpus if sentence]\n","        result = self.stats(cut_corpus, gold_corpus)\n","        return result\n","\n","\n","def get_model():\n","    \"\"\"\n","    專門處理模型相關事項\n","    \"\"\"\n","    global __model\n","    if not __model:\n","        __model = HMMHandler()\n","    return __model\n"],"metadata":{"id":"1MgUEhMk1ihW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["help(MultinomialHMM)"],"metadata":{"id":"qRzhlsySzLYT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 建立語料相關的類別\n","my_task = get_task()\n","my_task.initialize()\n","\n","# 計算機率資料\n","my_task.cal_state()\n"],"metadata":{"id":"EImeQZET2ZaO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 這個會跑很久，請同學有空試一下\n","my_model = get_model()\n","my_model.test()"],"metadata":{"id":"5aatmZSq3oIE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["my_model = get_model()\n","\n","# 測試一句話的斷詞\n","#maty_test = '這是一句好話再試一下'\n","#maty_test = '哈囉你好嗎？好久不見衷心感謝期待再相逢'\n","maty_test = '九百九十九朵玫瑰'\n","\n","my_model.cut(maty_test)\n"],"metadata":{"id":"R-uQqNn4xT-A"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Quiz - 2: 你順利建立 HMM 模型、並使用了這個模型嗎？請問你認為這個模型，可以做**什麼樣的應用**？**有什麼缺點**？"],"metadata":{"id":"LCsCeTxtpo5k"}},{"cell_type":"code","source":[],"metadata":{"id":"lnvpFdsyIrEZ"},"execution_count":null,"outputs":[]}]}